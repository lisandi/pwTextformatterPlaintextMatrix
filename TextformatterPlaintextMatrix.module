<?php

/* This program is free software. It comes without any warranty, to
 * the extent permitted by applicable law. You can redistribute it
 * and/or modify it under the terms of the Do What The Fuck You Want
 * To Public License, Version 2, as published by Sam Hocevar. See
 * http://sam.zoy.org/wtfpl/COPYING for more details. */

/**
 * Plaintext Matrix
 *
 * Transforms your textarea into matrix. Input records (one on line) in plaintext pw query syntax
 * and get array of objects back upon field loading.
 *
 * @author Adam Kiss <iam@adamkiss.com>
 *
**/

class TextformatterPlaintextMatrix extends Textformatter {

	/*
		PROCESSWIRE MODULE INFORMATION
	*/
	public static function getModuleInfo() {
		return array(
			'title' => 'Plaintext Matrix', 
			'version' => 100, 
			'summary' => "Transforms your textarea into matrix. Input records (one on line) in plaintext pw query syntax and get array of objects back upon field loading.", 
		); 
	}

	/*
		TYPE MODYFYING FUNCTIONS & VARIABLES
	*/

	/**
	* Transforms string into int|float (based on existence of comma [and other float values])
	*
	* note: this is little hack-ish version of both FILTER_VALIDATE_INT & FILTER_VALIDATE_FLOAT in
	* one function. If you feel bad about it... sorry
	*
	* @param string $value
	* @return int|float
	*/
	private function transform_Numeric($value){
		return $value + 0;
	}

	/**
	* Filters value and returns either boolean-ized value or null on failure
	*
	* @param mixed $value
	* @return null|boolean
	*/
	private function transform_Boolean($value){
		return filter_var($value, FILTER_VALIDATE_BOOLEAN, FILTER_NULL_ON_FAILURE);
	}

	/**
	* Detects type of value and retypes it if possible
	* 
	* @param string|array $value – string to check
	* @return string|array|int|float|boolean - retyped value
	*/
	private function transformValue($value){
		if (is_string($value)) {
			if (is_numeric($value)) {
				// return int|float
				return $this->transform_Numeric($value);
			} else {
				$testValue = $this->transform_Boolean($value);
				if ($testValue !== null){
					//return boolean
					return $testValue;
				}
			}
		}

		//fallback - return $value (either string or array)
		return $value;
	}

	/*
		PROCESSWIRE FORMAT FUNCTION
	*/

	/**
	* Textarea formatting functions – accepts textarea's content and returns it 'matrixed'
	* 
	* @param string $str – textarea content
	* @return array
	*/
	public function format(&$str) {
		if (empty($str)){
			$str = array();
			return;
		}

		//prepare array
		$parsedObjects = array();
		$parsedObjects = explode ("\n",trim($str));

		foreach ($parsedObjects as &$line){

			// create new query parser
			$queryParser = new Selectors($line);

			// create key => value array and import parsed values
			$kvarray = array();
			foreach ($queryParser as $kvpair){

				//add key => (possibly retyped) value pair
				$kvarray[$kvpair->field] = $this->transformValue($kvpair->value);

			}

			// return stdobject into array
			$line = (object) $kvarray;
		}

		// return array of objects
		$str = $parsedObjects;
	}
}
